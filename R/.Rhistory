aa <- 10
aa <- 10
aa
bb
c <- 3
bb <- 2
bb
c <- 3
c
d <- 3.5
d
a+b
## ---------------------------------------------------------------------- ##
a <- 1  # a에 1 할당
a       # a 출력
a+b
b <- 2
b
a+b
a+b+c
4/b
5*b
a*b
## -------------------------------------------------------------------- ##
var1 <- c(1, 2, 5, 7, 8)    # 숫자 다섯 개로 구성된 var1 생성
var1
var2 <- c(1:5)              # 1~5까지 연속값으로 var2 생성
var2
var3 <- seq(1, 5)           # 1~5까지 연속값으로 var3 생성
var3
var4 <- seq(1, 10, by = 2)  # 1~10까지 2 간격 연속값으로 var4 생성
var4
var5 <- seq(1, 10, by = 3)  # 1~10까지 3 간격 연속값으로 var5 생성
var5
var1
var1+2
var2
var3
var4
var5
var1+2
var1+var2
## -------------------------------------------------------------------- ##
str1 <- "a"
str1
str1
str2 <- "text"
str2
str3 <- "Hello World!"
str3
str4 <- c("a", "b", "c")
str4
str5 <- c("Hello!", "World", "is", "good!")
str5
str1+2
## -------------------------------------------------------------------- ##
# 변수 만들기
x <- c(1, 2, 3)
x
# 함수 적용하기
mean(x)
max(x)
min(x)
str5
paste(str5, collapse = ",")  # 쉼표를 구분자로 str4의 단어들 하나로 합치기
paste(str5, collapse = " ")
str5_paste <- paste(str5, collapse = " ")
str5_paste
paste(str5, collapse = ",")  # 쉼표를 구분자로 str4의 단어들 하나로 합치기
paste(str5, collapse = " ")
## -------------------------------------------------------------------- ##
install.packages("ggplot2")  # ggplot2 패키지 설치
library(ggplot2)             # ggplot2 패키지 로드
# 여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
# 빈도 그래프 출력
qplot(x)
## -------------------------------------------------------------------- ##
# data에 mpg, x축에 hwy 변수 지정하여 그래프 생성
qplot(data = mpg, x = hwy)
# x축 cty
qplot(data = mpg, x = cty)
# x축 drv, y축 hwy
qplot(data = mpg, x = drv, y = hwy)
# x축 drv, y축 hwy, 선 그래프 형태
qplot(data = mpg, x = drv, y = hwy, geom = "line")
# x축 drv, y축 hwy, 상자 그림 형태
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot")
# x축 drv, y축 hwy, 상자 그림 형태, drv별 색 표현
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot", colour = drv)
# qplot 함수 매뉴얼 출력
?qplot
mpg
exam <- c(80, 60, 70, 50, 90)
exam
mean(exam)
mean(exam)
exam_mean <- mean(exam)
exam_mean
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
english
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
math
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
class <- c(1, 1, 2, 2)
class
df_midterm <- data.frame(english, math, class)
df_midterm
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)     # df_midterm의 math로 평균 산술
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
# memory clear 작업
list=ls()
rm(list=ls())
new_data <- data.frame(sci = c(100, 20, 40, 30),
nat = c(90, 95, 97, 88))
new_data
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)     # df_midterm의 math로 평균 산술
min(new_data$sci)
max(new_data$sci)
min(new_data$nat)
max(new_data$nat)
## -------------------------------------------------------------------- ##
install.packages("readxl")
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("Data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("Data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
# 엑셀 파일의 세 번째 시트에 있는 데이터 불러오기
df_exam_sheet <- read_excel("Data/excel_exam_sheet.xlsx", sheet = 3)
df_exam_sheet
df_exam <- read_excel("Data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
## -------------------------------------------------------------------- ##
df_csv_exam <- read.csv("Data/csv_exam.csv")
df_csv_exam
df_csv_exam <- read.csv("Data/csv_exam.csv", stringsAsFactors = F)
## -------------------------------------------------------------------- ##
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
write.csv(df_midterm, file = "Data/df_midterm.csv")
rm(df_midterm)
load("Data/df_midterm.rda")
## -------------------------------------------------------------------- ##
save(df_midterm, file = "Data/df_midterm.rda")
load("Data/df_midterm.rda")
## -------------------------------------------------------------------- ##
save(df_midterm, file = "Data/df_midterm.rda")
## -------------------------------------------------------------------- ##
# 1.변수 만들기, 데이터 프레임 만들기
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
data.frame(english, math)     # 데이터 프레임 생성
# 엑셀 파일
library(readxl)                                 # readxl 패키지 로드
df_exam <- read_excel("Data/excel_exam.xlsx")        # 엑셀 파일 불러오기
# CSV 파일
df_csv_exam <- read.csv("Data/csv_exam.csv")         # CSV 파일 불러오기
write.csv(df_midterm, file = "Data/df_midterm.csv")  # CSV 파일로 저장하기
# Rda 파일
load("Data/df_midterm.rda")                          # Rda 파일 불러오기
save(df_midterm, file = "Data/df_midterm.rda")       # Rda 파일로 저장하기
## -------------------------------------------------------------------- ##
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
## -------------------------------------------------------------------- ##
save(df_midterm, file = "Data/df_midterm.rda")
load("Data/df_midterm.rda")
# memory clear 작업
list=ls()
rm(list=ls())
## -------------------------------------------------------------------- ##
exam <- read.csv("Data/csv_exam.csv")
head(exam)      # 앞에서부터 6행까지 출력
head(exam, 10)  # 앞에서부터 10행까지 출력
tail(exam)      # 뒤에서부터 6행까지 출력
tail(exam, 10)  # 뒤에서부터 10행까지 출력
View(exam)      # 데이터 뷰어 창에서 exam 데이터 확인
dim(exam)       # 행, 열 출력
str(exam)       # 데이터 속성 확인
summary(exam)   # 요약 통계량 출력
View(exam)      # 데이터 뷰어 창에서 exam 데이터 확인
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)     # Raw 데이터 앞부분 확인
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)     # Raw 데이터 앞부분 확인
tail(mpg)     # Raw 데이터 뒷부분 확인
View(mpg)     # Raw 데이터 뷰어 창에서 확인
str(mpg)      # 데이터 속성 확인
summary(mpg)  # 요약 통계량 출력
## -------------------------------------------------------------------- ##
df_raw <- data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 2))
df_raw
install.packages("dplyr")  # dplyr 설치
library(dplyr)             # dplyr 로드
install.packages("dplyr")  # dplyr 설치
install.packages("dplyr")
library(dplyr)             # dplyr 로드
df_new <- df_raw  # 복사본 생성
df_new            # 출력
df_new <- rename(df_new, v2 = var2)  # var2를 v2로 수정
df_new
df_new <- rename(df_new, first = var1)
df_new
## -------------------------------------------------------------------- ##
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
## -------------------------------------------------------------------- ##
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
df
df$var_mean <- (df$var1 + df$var2)/2  # var_mean 파생변수 생성
df
str(df)
## -------------------------------------------------------------------- ##
mpg$total <- (mpg$cty + mpg$hwy)/2  # 통합 연비 변수 생성
head(mpg)
mean(mpg$total)  # 통합 연비 변수 평균
## -------------------------------------------------------------------- ##
summary(mpg$total)  # 요약 통계량 산출
hist(mpg$total)     # 히스토그램 생성
head(mpg, 20)     # 데이터 확인
# 20이상이면 pass, 그렇지 않으면 fail 부여
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)     # 데이터 확인
table(mpg$test)   # 연비 합격 빈도표 생성
library(ggplot2)  # ggplot2 로드
qplot(mpg$test)   # 연비 합격 빈도 막대 그래프 생성
head(mpg, 20)     # 데이터 확인
table(mpg$grade)  # 등급 빈도표 생성
qplot(mpg$grade)  # 등급 빈도 막대 그래프 생성
## -------------------------------------------------------------------- ##
# total을 기준으로 A, B, C 등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
head(mpg, 20)     # 데이터 확인
table(mpg$grade)  # 등급 빈도표 생성
qplot(mpg$grade)  # 등급 빈도 막대 그래프 생성
iris
iris <- as.data.frame(ggplot2::iris)
iris
iris$wide <- iris$Sepal.Length * Sepal.Width
iris$wide <- iris$Sepal.Length * iris$Sepal.Width
iris
summary(iris$Sepal.Length)
hist(iris$Sepal.Length)
iris$level <- ifelse(iris$Sepal.Length >= 6.5, "A",
ifelse(iris$Sepal.Length >= 5, "B", "C"))
iris
