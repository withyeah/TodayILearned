# 함수 적용하기
mean(x)
max(x)
min(x)
str5
paste(str5, collapse = ",")  # 쉼표를 구분자로 str4의 단어들 하나로 합치기
paste(str5, collapse = " ")
str5_paste <- paste(str5, collapse = " ")
str5_paste
paste(str5, collapse = ",")  # 쉼표를 구분자로 str4의 단어들 하나로 합치기
paste(str5, collapse = " ")
## -------------------------------------------------------------------- ##
install.packages("ggplot2")  # ggplot2 패키지 설치
library(ggplot2)             # ggplot2 패키지 로드
# 여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
# 빈도 그래프 출력
qplot(x)
## -------------------------------------------------------------------- ##
# data에 mpg, x축에 hwy 변수 지정하여 그래프 생성
qplot(data = mpg, x = hwy)
# x축 cty
qplot(data = mpg, x = cty)
# x축 drv, y축 hwy
qplot(data = mpg, x = drv, y = hwy)
# x축 drv, y축 hwy, 선 그래프 형태
qplot(data = mpg, x = drv, y = hwy, geom = "line")
# x축 drv, y축 hwy, 상자 그림 형태
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot")
# x축 drv, y축 hwy, 상자 그림 형태, drv별 색 표현
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot", colour = drv)
# qplot 함수 매뉴얼 출력
?qplot
mpg
exam <- c(80, 60, 70, 50, 90)
exam
mean(exam)
mean(exam)
exam_mean <- mean(exam)
exam_mean
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
english
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
math
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
class <- c(1, 1, 2, 2)
class
df_midterm <- data.frame(english, math, class)
df_midterm
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)     # df_midterm의 math로 평균 산술
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
# memory clear 작업
list=ls()
rm(list=ls())
new_data <- data.frame(sci = c(100, 20, 40, 30),
nat = c(90, 95, 97, 88))
new_data
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)     # df_midterm의 math로 평균 산술
min(new_data$sci)
max(new_data$sci)
min(new_data$nat)
max(new_data$nat)
## -------------------------------------------------------------------- ##
install.packages("readxl")
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("Data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("Data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
# 엑셀 파일의 세 번째 시트에 있는 데이터 불러오기
df_exam_sheet <- read_excel("Data/excel_exam_sheet.xlsx", sheet = 3)
df_exam_sheet
df_exam <- read_excel("Data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("Data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
## -------------------------------------------------------------------- ##
df_csv_exam <- read.csv("Data/csv_exam.csv")
df_csv_exam
df_csv_exam <- read.csv("Data/csv_exam.csv", stringsAsFactors = F)
## -------------------------------------------------------------------- ##
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
write.csv(df_midterm, file = "Data/df_midterm.csv")
rm(df_midterm)
load("Data/df_midterm.rda")
## -------------------------------------------------------------------- ##
save(df_midterm, file = "Data/df_midterm.rda")
load("Data/df_midterm.rda")
## -------------------------------------------------------------------- ##
save(df_midterm, file = "Data/df_midterm.rda")
## -------------------------------------------------------------------- ##
# 1.변수 만들기, 데이터 프레임 만들기
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
data.frame(english, math)     # 데이터 프레임 생성
# 엑셀 파일
library(readxl)                                 # readxl 패키지 로드
df_exam <- read_excel("Data/excel_exam.xlsx")        # 엑셀 파일 불러오기
# CSV 파일
df_csv_exam <- read.csv("Data/csv_exam.csv")         # CSV 파일 불러오기
write.csv(df_midterm, file = "Data/df_midterm.csv")  # CSV 파일로 저장하기
# Rda 파일
load("Data/df_midterm.rda")                          # Rda 파일 불러오기
save(df_midterm, file = "Data/df_midterm.rda")       # Rda 파일로 저장하기
## -------------------------------------------------------------------- ##
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
## -------------------------------------------------------------------- ##
save(df_midterm, file = "Data/df_midterm.rda")
load("Data/df_midterm.rda")
# memory clear 작업
list=ls()
rm(list=ls())
## -------------------------------------------------------------------- ##
exam <- read.csv("Data/csv_exam.csv")
head(exam)      # 앞에서부터 6행까지 출력
head(exam, 10)  # 앞에서부터 10행까지 출력
tail(exam)      # 뒤에서부터 6행까지 출력
tail(exam, 10)  # 뒤에서부터 10행까지 출력
View(exam)      # 데이터 뷰어 창에서 exam 데이터 확인
dim(exam)       # 행, 열 출력
str(exam)       # 데이터 속성 확인
summary(exam)   # 요약 통계량 출력
View(exam)      # 데이터 뷰어 창에서 exam 데이터 확인
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)     # Raw 데이터 앞부분 확인
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)     # Raw 데이터 앞부분 확인
tail(mpg)     # Raw 데이터 뒷부분 확인
View(mpg)     # Raw 데이터 뷰어 창에서 확인
str(mpg)      # 데이터 속성 확인
summary(mpg)  # 요약 통계량 출력
## -------------------------------------------------------------------- ##
df_raw <- data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 2))
df_raw
install.packages("dplyr")  # dplyr 설치
library(dplyr)             # dplyr 로드
install.packages("dplyr")  # dplyr 설치
install.packages("dplyr")
library(dplyr)             # dplyr 로드
df_new <- df_raw  # 복사본 생성
df_new            # 출력
df_new <- rename(df_new, v2 = var2)  # var2를 v2로 수정
df_new
df_new <- rename(df_new, first = var1)
df_new
## -------------------------------------------------------------------- ##
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
## -------------------------------------------------------------------- ##
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
df
df$var_mean <- (df$var1 + df$var2)/2  # var_mean 파생변수 생성
df
str(df)
## -------------------------------------------------------------------- ##
mpg$total <- (mpg$cty + mpg$hwy)/2  # 통합 연비 변수 생성
head(mpg)
mean(mpg$total)  # 통합 연비 변수 평균
## -------------------------------------------------------------------- ##
summary(mpg$total)  # 요약 통계량 산출
hist(mpg$total)     # 히스토그램 생성
head(mpg, 20)     # 데이터 확인
# 20이상이면 pass, 그렇지 않으면 fail 부여
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)     # 데이터 확인
table(mpg$test)   # 연비 합격 빈도표 생성
library(ggplot2)  # ggplot2 로드
qplot(mpg$test)   # 연비 합격 빈도 막대 그래프 생성
head(mpg, 20)     # 데이터 확인
table(mpg$grade)  # 등급 빈도표 생성
qplot(mpg$grade)  # 등급 빈도 막대 그래프 생성
## -------------------------------------------------------------------- ##
# total을 기준으로 A, B, C 등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
head(mpg, 20)     # 데이터 확인
table(mpg$grade)  # 등급 빈도표 생성
qplot(mpg$grade)  # 등급 빈도 막대 그래프 생성
iris
iris <- as.data.frame(ggplot2::iris)
iris
iris$wide <- iris$Sepal.Length * Sepal.Width
iris$wide <- iris$Sepal.Length * iris$Sepal.Width
iris
summary(iris$Sepal.Length)
hist(iris$Sepal.Length)
iris$level <- ifelse(iris$Sepal.Length >= 6.5, "A",
ifelse(iris$Sepal.Length >= 5, "B", "C"))
iris
qplot(iris$wide)
install.packages("ggplot2")
library(ggplot2)
qplot(iris$wide)
iris
iris$wide <- iris$Sepal.Length * iris$Sepal.Width
summary(iris$Sepal.Length)
hist(iris$Sepal.Length)
iris$level <- ifelse(iris$Sepal.Length >= 6.5, "A",
ifelse(iris$Sepal.Length >= 5, "B", "C"))
install.packages("ggplot2")
library(ggplot2)
qplot(iris$wide)
iris
## -------------------------------------------------------------------- ##
library(dplyr)
exam <- read.csv("Data/csv_exam.csv")
exam
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1)
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 3반이 아닌 경우
exam %>% filter(class != 3)
## -------------------------------------------------------------------- ##
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어 점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어 점수가 80점 이하인 경우
exam %>% filter(english <= 80)
## -------------------------------------------------------------------- ##
# 1반이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class == 2 & english >= 80)
## -------------------------------------------------------------------- ##
# 수학 점수가 90점 이상이거나 영어 점수가 90점 이상인 경우
exam %>% filter(math >= 90 | english >= 90)
# 영어 점수가 90점 미만이거나 과학점수가 50점 미만인 경우
exam %>% filter(english < 90 | science < 50)
## -------------------------------------------------------------------- ##
# 1, 3, 5 반에 해당되면 추출
exam %>% filter(class == 1 | class == 3 | class == 5)
exam %>% filter(class %in% c(1,3,5))
# 2반이 아닌 경우
exam %>% filter(class != 2)
## -------------------------------------------------------------------- ##
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
class2 <- exam %>% filter(class == 2)  # class가 2인 행 추출, class2에 할당
mean(class1$math)                      # 1반 수학 점수 평균 구하기
mean(class2$math)                      # 2반 수학 점수 평균 구하기
# calss 3이고 수학 점수가 90점 이상인 데이터 출력
exam %>% filter(class == 3 & math >= 90)
exam %>% filter(math >= 90)
# class3 변수에 classrk 3인 데이터를 추출해서 할당하고
# 영어점수의 최대값을 구하기
class3 <- exam %>% filter(class == 3)
max(class3$english)
x1<-seq(10:15)
x1
x1<-seq(1,10,add=4)
x1 <- c(10:15)
# class3인 데이터를 추출한 후 과학 과목만 7줄을 변수 seven1에 저장하기
seven1 <- exam %>% filter(class == 3) %>% select(science) %>% head(7)
seven1
exam <- data.frame(Data/csv_exam.csv)
exam
exam <- read.csv("Data/csv_exam.csv")
exam
exam %>% arrange(class)
exam
exam %>% mutate(total = math + english + science)
tot_median <- median(exam$total)
tot_median
exam
exam %>% mutate(total = math + english + science)
exam
## -------------------------------------------------------------------- ##
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
final = c(70, 83, 65, 95, 80))
test1  # test1 출력
test2  # test2 출력
total <- left_join(test1, test2, by = "id")  # id 기준으로 합쳐서 total에 할당
total                                        # total 출력
## -------------------------------------------------------------------- ##
name <- data.frame(class = c(1, 2, 3, 4, 5),
teacher = c("kim", "lee", "park", "choi", "jung"))
name
exam_new <- left_join(exam, name, by = "class")
exam_new
## -------------------------------------------------------------------- ##
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),
test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),
test = c(70, 83, 65, 95, 80))
group_a  # group_a 출력
group_b  # group_b 출력
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all                                 # group_all 출력
## -------------------------------------------------------------------- ##
## 1.조건에 맞는 데이터만 추출하기
exam %>% filter(english >= 80)
# 여러 조건 동시 충족
exam %>% filter(class == 1 & math >= 50)
# 여러 조건 중 하나 이상 충족
exam %>% filter(math >= 90 | english >= 90)
exam %>% filter(class %in% c(1,3,5))
## 2.필요한 변수만 추출하기
exam %>% select(math)
exam %>% select(class, math, english)
## 3.함수 조합하기, 일부만 출력하기
exam %>%
select(id, math) %>%
head(10)
## 4.순서대로 정렬하기
exam %>% arrange(math)         # 오름차순 정렬
exam %>% arrange(desc(math))   # 내림차순 정렬
exam %>% arrange(class, math)  # 여러 변수 기준 오름차순 정렬
## 5.파생변수 추가하기
exam %>% mutate(total = math + english + science)
# 여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science,
mean = (math + english + science)/3)
# mutate()에 ifelse() 적용하기
exam %>% mutate(test = ifelse(science >= 60, "pass", "fail"))
# 추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total)
head(3)
exam %>% mutate(total = math + english + science) %>%
exam %>% mutate(total = math + english + science) %>% arrange(desc(total) %>% head(3)
exam <- read.csv("Data/csv_exam.csv")
exam <- read.csv("Data/csv_exam.csv")
exam %>% arrange(class)
exam %>%
mutate(total = math + english + science) %>%
arrange(desc(total))
exam <- read.csv("Data/csv_exam.csv")
exam %>%
group_by(class) %>%
mutate(total = (math + english + science)) %>%
summarise(tot_median = median(total)) %>%
arrange(desc(tot_median)) %>%
head(3)
exam %>%
group_by(class) %>%
mutate(total = (math + english + science)) %>%
summarise(tot_median = median(total))
exam %>%
group_by(class) %>%
mutate(total = (math + english + science))
exam %>%
group_by(class) %>%
mutate(total = (math + english + science)) %>%
summarise(tot_median = median(total)) %>%
arrange(desc(tot_median)) %>%
exam %>%
group_by(class) %>%
mutate(total = (math + english + science)) %>%
summarise(tot_median = median(total)) %>%
arrange(desc(tot_median))
exam <- read.csv("Data/csv_exam.csv")
exam %>%
group_by(class) %>%
mutate(total = (math + english + science)) %>%
summarise(tot_median = median(total)) %>%
arrange(desc(tot_median))
## -------------------------------------------------------------------- ##
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
df
is.na(df)               # 결측치 확인
table(is.na(df))        # 결측치 빈도 출력
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
## -------------------------------------------------------------------- ##
library(dplyr)                # dplyr 패키지 로드
df %>% filter(is.na(score))   # score가 NA인 데이터만 출력
View(group_all)
df %>% filter(!is.na(score))  # score 결측치 제거
df_nomiss <- df %>% filter(!is.na(score))  # score 결측치 제거
mean(df_nomiss$score)                      # score 평균 산출
sum(df_nomiss$score)                       # score 합계 산출
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))  # score, sex 결측치 제거
df_nomiss                                                # 출력
df_nomiss2 <- na.omit(df)  # 모든 변수에 결측치 없는 데이터 추출
df_nomiss2                 # 출력
exam <- read.csv("csv_exam.csv")  # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA   # 3, 8, 15행의 math에 NA 할당
exam <- read.csv("Data/csv_exam.csv")  # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA   # 3, 8, 15행의 math에 NA 할당
exam
exam[c(2, 7, 8), "english"] <- NA
exam
install.packages("~/Development/TodayILearned/R/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
install.packages('rJava', type = 'binary');library(rJava);.jinit();rstudioapi::restartSession()
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP) #최종적으로 "KoNLP" 패키지를 불러옵니다
useNIADic()
# 데이터 불러오기
txt <- readLines("data/hiphop.txt")
head(txt)
useNIADic()
install.packages("stringr")
install.packages("stringr")
library(stringr)
# 특수문제 제거
txt <- str_replace_all(txt, "\\W", " ")
install.packages('rlang')
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
## -------------------------------------------------------------------- ##
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
library(rlang)
## -------------------------------------------------------------------- ##
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
useNIADic()
library(multilinguer)
library(KoNLP) #최종적으로 "KoNLP" 패키지를 불러옵니다
useNIADic()
# 데이터 불러오기
txt <- readLines("data/hiphop.txt")
head(txt)
install.packages("stringr")
install.packages("stringr")
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
install.packages('rJava', type = 'binary');library(rJava);.jinit();rstudioapi::restartSession()
install.packages("remotes")
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP) #최종적으로 "KoNLP" 패키지를 불러옵니다
useNIADic()
# 데이터 불러오기
txt <- readLines("data/hiphop.txt")
head(txt)
install.packages("stringr")
install.packages("stringr")
library(stringr)
# 특수문제 제거
txt <- str_replace_all(txt, "\\W", " ")
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
## -------------------------------------------------------------------- ##
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
# 가사에서 명사추출
nouns <- extractNoun(txt)
